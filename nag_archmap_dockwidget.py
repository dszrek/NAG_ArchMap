# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NagArchMapDockWidget
                                 A QGIS plugin
 Import do projektu QGIS georeferencjonowanych załączników mapowych dokumentacji zgromadzonych w NAG PIG-PIB
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-10-13
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Dominik Szrek / PIG-PIB
        email                : dszr@pgi.gov.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import pandas as pd
from .classes import PgConn

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'nag_archmap_dockwidget_base.ui'))


class NagArchMapDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(NagArchMapDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.setup_widgets()

    def setup_widgets(self):
        """Podłączenie widgetów do funkcji."""
        self.btn_search.clicked.connect(self.search_dok)

    def search_dok(self):
        """Wyszukanie dokumentacji w db na podstawie zapytania sql."""
        search_txt = self.le_search.text()
        if len(search_txt) == 0:
            return
        dok_df = self.dok_from_query(search_txt)
        print(dok_df)

    def dok_from_query(self, search_txt):
        """Zwraca dataframe z danymi dokumentacji wybranych w kwerendzie."""
        db = PgConn()
        sql = f"SELECT * FROM search_dok('{search_txt}', false)"
        if db:
            df = db.query_pd(sql, ['dok_id', 'cbdg_id', 'nr_inw', 'czy_nr_kat', 'tytul', 'rok', 'path', 'tagi', 'zloza', 'rank'])
            if isinstance(df, pd.DataFrame):
                return df if len(df) > 0 else None

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
